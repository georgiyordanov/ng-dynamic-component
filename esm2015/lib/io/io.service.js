import { ChangeDetectorRef, ComponentFactoryResolver, Inject, Injectable, KeyValueDiffers, } from '@angular/core';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { createChange, createNewChange, noop } from '../util';
import { EventArgumentToken } from './event-argument';
export class IoService {
    constructor(differs, cfr, eventArgument, cdr) {
        this.differs = differs;
        this.cfr = cfr;
        this.eventArgument = eventArgument;
        this.cdr = cdr;
        this.checkInit = this.failInit;
        this.lastComponentInst = null;
        this.inputsDiffer = this.differs.find({}).create();
        this.compFactory = null;
        this.outputsShouldDisconnect$ = new Subject();
        this.outputsChanged = () => false;
    }
    get compRef() {
        return this.compInjector.componentRef;
    }
    get componentInst() {
        return this.compRef ? this.compRef.instance : null;
    }
    get componentInstChanged() {
        if (this.lastComponentInst !== this.componentInst) {
            this.lastComponentInst = this.componentInst;
            return true;
        }
        else {
            return false;
        }
    }
    get compCdr() {
        // tslint:disable-next-line: deprecation
        return this.compRef ? this.compRef.injector.get(ChangeDetectorRef) : null;
    }
    ngOnDestroy() {
        this._disconnectOutputs();
    }
    init(componentInjector, options = {}) {
        this.checkInit = componentInjector ? noop : this.failInit;
        this.compInjector = componentInjector;
        if (options.trackOutputChanges) {
            const outputsDiffer = this.differs.find({}).create();
            this.outputsChanged = outputs => !!outputsDiffer.diff(outputs);
        }
    }
    update(inputs, outputs, inputsChanged, outputsChanged) {
        this.checkInit();
        this.updateIO(inputs, outputs);
        const compChanged = this.componentInstChanged;
        if (compChanged || inputsChanged) {
            const inputsChanges = this._getInputsChanges();
            if (inputsChanges) {
                this._updateInputChanges(inputsChanges);
            }
            this.updateInputs(compChanged || !this.lastInputChanges);
        }
        if (compChanged || outputsChanged) {
            this.bindOutputs();
        }
    }
    maybeUpdate() {
        this.checkInit();
        if (this.componentInstChanged) {
            this.updateInputs(true);
            this.bindOutputs();
            return;
        }
        if (this.outputsChanged(this.outputs)) {
            this.bindOutputs();
        }
        if (!this.inputs) {
            return;
        }
        const inputsChanges = this._getInputsChanges();
        if (inputsChanges) {
            const isNotFirstChange = !!this.lastInputChanges;
            this._updateInputChanges(inputsChanges);
            if (isNotFirstChange) {
                this.updateInputs();
            }
        }
    }
    updateIO(inputs, outputs) {
        this.inputs = inputs;
        this.outputs = outputs;
    }
    updateInputs(isFirstChange = false) {
        if (isFirstChange) {
            this._updateCompFactory();
        }
        const compInst = this.componentInst;
        let inputs = this.inputs;
        if (!inputs || !compInst) {
            return;
        }
        inputs = this._resolveInputs(inputs);
        Object.keys(inputs).forEach(p => (compInst[p] = inputs[p]));
        // Mark component for check to re-render with new inputs
        if (this.compCdr) {
            this.compCdr.markForCheck();
        }
        this.notifyOnInputChanges(this.lastInputChanges, isFirstChange);
    }
    bindOutputs() {
        this._disconnectOutputs();
        const compInst = this.componentInst;
        let outputs = this.outputs;
        if (!outputs || !compInst) {
            return;
        }
        outputs = this._resolveOutputs(outputs);
        Object.keys(outputs)
            .filter(p => compInst[p])
            .forEach(p => compInst[p]
            .pipe(takeUntil(this.outputsShouldDisconnect$))
            .subscribe((event) => {
            this.cdr.markForCheck();
            return outputs[p](event);
        }));
    }
    notifyOnInputChanges(changes = {}, forceFirstChanges) {
        // Exit early if component not interested to receive changes
        if (!this.componentInst.ngOnChanges) {
            return;
        }
        if (forceFirstChanges) {
            changes = this._collectFirstChanges();
        }
        this.componentInst.ngOnChanges(changes);
    }
    _disconnectOutputs() {
        this.outputsShouldDisconnect$.next();
    }
    _getInputsChanges() {
        return this.inputsDiffer.diff(this.inputs);
    }
    _updateInputChanges(differ) {
        this.lastInputChanges = this._collectChangesFromDiffer(differ);
    }
    _collectFirstChanges() {
        const changes = {};
        const inputs = this.inputs;
        Object.keys(inputs).forEach(prop => (changes[prop] = createNewChange(inputs[prop])));
        return this._resolveChanges(changes);
    }
    _collectChangesFromDiffer(differ) {
        const changes = {};
        differ.forEachAddedItem(record => (changes[record.key] = createNewChange(record.currentValue)));
        differ.forEachChangedItem(record => (changes[record.key] = createChange(record.currentValue, record.previousValue)));
        return this._resolveChanges(changes);
    }
    _resolveCompFactory() {
        try {
            try {
                return this.cfr.resolveComponentFactory(this.compRef.componentType);
            }
            catch (e) {
                // Fallback if componentType does not exist (happens on NgComponentOutlet)
                return this.cfr.resolveComponentFactory(this.compRef.instance.constructor);
            }
        }
        catch (e) {
            // Factory not available - bailout
            return null;
        }
    }
    _updateCompFactory() {
        this.compFactory = this._resolveCompFactory();
    }
    _resolveInputs(inputs) {
        if (!this.compFactory) {
            return inputs;
        }
        return this._remapIO(inputs, this.compFactory.inputs);
    }
    _resolveOutputs(outputs) {
        outputs = this._processOutputs(outputs);
        if (!this.compFactory) {
            return outputs;
        }
        return this._remapIO(outputs, this.compFactory.outputs);
    }
    _processOutputs(outputs) {
        const processedOutputs = {};
        Object.keys(outputs).forEach(key => {
            const outputExpr = outputs[key];
            if (typeof outputExpr === 'function') {
                processedOutputs[key] = outputExpr;
            }
            else {
                processedOutputs[key] =
                    outputExpr && this._processOutputArgs(outputExpr);
            }
        });
        return processedOutputs;
    }
    _processOutputArgs(output) {
        const { handler } = output;
        const args = 'args' in output ? output.args || [] : [this.eventArgument];
        return event => handler(...args.map(arg => (arg === this.eventArgument ? event : arg)));
    }
    _resolveChanges(changes) {
        if (!this.compFactory) {
            return changes;
        }
        return this._remapIO(changes, this.compFactory.inputs);
    }
    _remapIO(io, mapping) {
        const newIO = {};
        Object.keys(io).forEach(key => {
            const newKey = this._findPropByTplInMapping(key, mapping) || key;
            newIO[newKey] = io[key];
        });
        return newIO;
    }
    _findPropByTplInMapping(tplName, mapping) {
        for (const map of mapping) {
            if (map.templateName === tplName) {
                return map.propName;
            }
        }
        return null;
    }
    failInit() {
        throw Error('IoService: ComponentInjector was not set! Please call init() method!');
    }
}
IoService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
IoService.ctorParameters = () => [
    { type: KeyValueDiffers },
    { type: ComponentFactoryResolver },
    { type: String, decorators: [{ type: Inject, args: [EventArgumentToken,] }] },
    { type: ChangeDetectorRef }
];
//# sourceMappingURL=data:application/json;base64,